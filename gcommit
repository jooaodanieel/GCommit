#!/usr/bin/env python
from __future__ import print_function
import argparse
import os
import sys
import tempfile
from subprocess import call

def format_developer(line):
    """
    A team member must be written as
    ID="Member Name <member.email@example.com>"
    """
    return line.replace("\n", "").split("=")


def check_format(str_array):
    return len(str_array) == 2


def read_team():
    try:
        team = {}
        curr_dir = os.getcwd()
        team_file = "{}/.gitteam".format(curr_dir)
        with open(team_file) as f:
            for i, line in enumerate(f):
                dev = format_developer(line)

                if check_format(dev):
                    team[dev[0]] = dev[1]
                else:
                    raise SyntaxError("Format error .gitteam:{}".format(i + 1))

        return team

    except IOError:
        raise IOError('Could not find .gitteam file')


def filter_team(team, initials):
    filtered = {}

    error = None
    for mem in initials:
        if mem in team:
            filtered[mem] = team[mem]
        else:
            error = "Identifier '{id}' not found".format(id=mem)
            break

    msg = "Identifiers must match those in .gitteam file"
    if error:
        raise ValueError("{} - {}".format(msg, error))
    if len(filtered) == 0:
        raise ValueError(msg)
    return filtered


def commit():
    call(["git", "commit", "-s"])

def remove_member(member):
    curr_dir = os.getcwd()
    team_file = "{}/.gitteam".format(curr_dir)
    new_file = ''

    with open(team_file, 'r') as f:
        for line in f:
            formated = format_developer(line)
            if formated[0] != member: 
                new_file += line
    
    file = open(team_file, 'w')
    file.write(new_file)
    
def group_commit(team,c_args):
    initial_message = b"\n"

    for d in team:
        line = "\nSigned-off-by: {}".format(team[d])
        initial_message += line.encode()

    with tempfile.NamedTemporaryFile(suffix=".tmp") as tf:
        tf.write(initial_message)
        tf.flush()
        call(["git", "commit", "-t", tf.name]+c_args)


def main():
    """
    Tries to create a multi-dev commit signature
    If there's no .gitteam file, then a regular commit is done
    If there's an argument-format error, then a ValueError is raised
    """

    # Define expected command line arguments, and parse arguments given
    parser = argparse.ArgumentParser(
        description='GCommit is a git-plugin that allows commits to be signed \
                    by more than one person -- pair and mob programming \
                    reality.')
    parser.add_argument(
        'initials', metavar='[INITIALS]', type=str, nargs='*',
        help='The intials of each developer defined in .gitteam')

    parser.add_argument(
        '--remove', '-r', metavar='[INITIALS]', type=str,
        help='Remove a member from .gitteam', dest='remotion')
    
    parser.add_argument(
        '--sign-all',action='store_true',
        help='Add all members to team commit.', dest='addall')
    
    parser.add_argument(
        '--except',action='store_true',
        help='Remove member from current team commit.' , dest='exceptcomm')

    all_args = parser.parse_known_args()
    gc_args = all_args[0] # arguments which are detected based on above definition for gcommit
    c_args = all_args[1] # additional arguments given by user, to be passed as it is to git commit
    try:
        if(gc_args.remotion):
            # Removes initials passed with --remove
            remove_member(gc_args.remotion)
        team = read_team()

        if(gc_args.addall):
            gc_args.initials = team.keys()
            
        if(gc_args.exceptcomm):
            initials_ls = [gc_args.exceptcomm] + gc_args.initials
            for elem in initials_ls:
                if elem in team:
                    del team[elem]
                else:
                    print("Member {} not found in .gitteam.".format(elem))
            group = filter_team(team, team.keys())
            group_commit(group,c_args)
        else:
            group = filter_team(team, gc_args.initials)
            group_commit(group,c_args)

    except ValueError as ve:
        print(ve)
    except OSError:
        commit()
    except SyntaxError as se:
        print(se)


if __name__ == "__main__":
    main()
